#include <string.h>
#include <stdio.h>
#include <stdlib.h>
#include <openssl/evp.h>
#include <openssl/crypto.h>

// gcc name.c -o name.c -lcrypto -lssl
// probleme génération hash

void calculate_md5_hash(const char *input, char *output) {
    EVP_MD_CTX *mdctx;
    const EVP_MD *md;
    unsigned int md_len;

    OpenSSL_add_all_digests();

    md = EVP_get_digestbyname("md5");
    if (!md) {
        fprintf(stderr, "Impossible d'initialiser MD5.\n");
        exit(1);
    }

    mdctx = EVP_MD_CTX_new();
    EVP_DigestInit_ex(mdctx, md, NULL);
    EVP_DigestUpdate(mdctx, input, strlen(input));
    EVP_DigestFinal_ex(mdctx, output, &md_len);
    
    EVP_MD_CTX_free(mdctx);
}

void print_md5_hash(const unsigned char *hash) {
    for (int i = 0; i < 16; i++) {
        printf("%02x", hash[i]);
    }
    printf("\n");
}

int check_password(const char *password, const char *target_hash) {
    unsigned char hash[16];
    calculate_md5_hash(password, hash);

    printf("Mot de passe généré : %s\n", password);
    //printf("Hashage généré : %s\n", hash);
    print_md5_hash(hash);


    if (memcmp(hash, target_hash, 16) == 0) {
    printf("Mot de passe trouvé : %s\n", password);
    return 1;
}

    return 0;
}

int generate_password_recursive(char *password, int length, const char *target_hash, int index) {
    char alphabet[] = "abcdefghijklmnopqrstuvwxyz";

    if (index == length) {
        password[length] = '\0'; // Null-terminate the password
        if (check_password(password, target_hash)) {
            printf("Mot de passe trouvé : %s\n", password);
            return 1;
        }
        return 0;
    }

    for (int i = 0; i < 26; i++) {
        password[index] = alphabet[i];
        generate_password_recursive(password, length, target_hash, index + 1);
    }

    return 0;
}
void hex_string_to_bytes(const char *hex_string, unsigned char *output) {
    int i, j;
    for (i = 0, j = 0; i < strlen(hex_string); i += 2, j++) {
        sscanf(hex_string + i, "%2hhx", &output[j]);
    }
}


int main() {
    char hex_target_hash[] = "f3abb86bd34cf4d52698f14c0da1dc60"; // zzz
    unsigned char target_hash[16];
    hex_string_to_bytes(hex_target_hash, target_hash);

    int max_length = 3;

    for (int length = 1; length <= max_length; length++) {
        char password[length + 1];
        memset(password, 0, sizeof(password)); // Initialize the password buffer with null characters

        //printf("Testing passwords of length %d...\n", length); // a reactiver quand ca fonctionnera
        if (generate_password_recursive(password, length, target_hash, 0)) {
            printf("Mot de passe trouvé. \n");
            return 0;
        }
    }

    printf("Mot de passe non trouvé. \n");
    return 0;
}
